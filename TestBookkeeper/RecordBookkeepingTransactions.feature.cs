// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.261
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TestBookkeeper
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Record Bookkeeping Transactions")]
    public partial class RecordBookkeepingTransactionsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "RecordBookkeepingTransactions.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Record Bookkeeping Transactions", "\r\n- Create accounts\r\n- Record transactions in the ledger", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create an account")]
        public virtual void CreateAnAccount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create an account", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("a Accounts Receivable ledger with id 3001 and a revenue account no. 3000 as contr" +
                    "olling account");
#line 8
 testRunner.And("a revenue account 1236 \"Sales (Services)\" in Accounts Receivable");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "AccountNumber",
                        "AcctType",
                        "AccountName",
                        "Debit",
                        "Credit"});
            table1.AddRow(new string[] {
                        "1236",
                        "Revenue",
                        "Sales (Services)",
                        "0.0",
                        "0.0"});
#line 9
 testRunner.Then("the trial balance of the Accounts Receivable ledger should look like this:", ((string)(null)), table1);
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Record a transaction")]
        public virtual void RecordATransaction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Record a transaction", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given("a Accounts Receivable ledger with id 3001 and a revenue account no. 3000 as contr" +
                    "olling account");
#line 16
 testRunner.And("a revenue account 1236 \"Sales (Services)\" in Accounts Receivable");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "AccountNumber",
                        "AccountName",
                        "Date",
                        "TransactionReference",
                        "Amount"});
            table2.AddRow(new string[] {
                        "1236",
                        "Sales (Services)",
                        "12/3/2011",
                        "5434 - Widgets, Harry Slayton",
                        "2034.12"});
#line 18
 testRunner.When("I record the following transaction in the Accounts Receivable ledger:", ((string)(null)), table2);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "AccountNumber",
                        "AcctType",
                        "AccountName",
                        "Debit",
                        "Credit"});
            table3.AddRow(new string[] {
                        "1236",
                        "Revenue",
                        "Sales (Services)",
                        "0.0",
                        "2034.12"});
#line 22
 testRunner.Then("the trial balance of the Accounts Receivable ledger should look like this:", ((string)(null)), table3);
#line 26
 testRunner.And("the Accounts Receivable ledger should not balance.");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Record two transactions")]
        public virtual void RecordTwoTransactions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Record two transactions", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line 29
 testRunner.Given("a Accounts Receivable ledger with id 3001 and a revenue account no. 3000 as contr" +
                    "olling account");
#line 30
 testRunner.And("a revenue account 1236 \"Sales (Services)\" in Accounts Receivable");
#line 32
 testRunner.And("a Assets ledger with id 4001 and a asset account no. 4000 as controlling account");
#line 33
 testRunner.And("a asset account 2000 \"Bank\" in Assets");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "AccountNumber",
                        "AccountName",
                        "Date",
                        "TransactionReference",
                        "Amount"});
            table4.AddRow(new string[] {
                        "1236",
                        "Sales (Services)",
                        "12/3/2011",
                        "3212 - Maintenance, Bill Jones",
                        "2034.12"});
#line 36
 testRunner.When("I record the following transaction in the Accounts Receivable ledger:", ((string)(null)), table4);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "AccountNumber",
                        "AccountName",
                        "Date",
                        "TransactionReference",
                        "Amount"});
            table5.AddRow(new string[] {
                        "2000",
                        "Bank",
                        "12/3/2011",
                        "3212 - Maintenance, Bill Jones",
                        "2034.12"});
#line 40
 testRunner.And("I record the following transaction in the Assets ledger:", ((string)(null)), table5);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "AccountNumber",
                        "AcctType",
                        "AccountName",
                        "Debit",
                        "Credit"});
            table6.AddRow(new string[] {
                        "1236",
                        "Revenue",
                        "Sales (Services)",
                        "0.0",
                        "2034.12"});
#line 45
 testRunner.Then("the trial balance of the Accounts Receivable ledger should look like this:", ((string)(null)), table6);
#line 48
 testRunner.And("the Accounts Receivable ledger should not balance.");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "AccountNumber",
                        "AcctType",
                        "AccountName",
                        "Debit",
                        "Credit"});
            table7.AddRow(new string[] {
                        "2000",
                        "Asset",
                        "Bank",
                        "2034.12",
                        "0.0"});
#line 50
 testRunner.And("the trial balance of the Assets ledger should look like this:", ((string)(null)), table7);
#line 53
 testRunner.And("the Assets ledger should not balance.");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
