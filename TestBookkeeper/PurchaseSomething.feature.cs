// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.261
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TestBookkeeper
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Purchasing")]
    public partial class PurchasingFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PurchaseSomething.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Purchasing", "When I purchase something the supplier account should show the liability, the ass" +
                    "et account\r\nshould show the asset and sales tax eligible for government refund s" +
                    "hould be shown.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Purchase office supplies")]
        public virtual void PurchaseOfficeSupplies()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Purchase office supplies", ((string[])(null)));
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given("a asset account 1234 \"Office Supplies\"");
#line 7
 testRunner.And("a liability account 5000 \"Joe\'s Office Supplies\"");
#line 8
 testRunner.When("I purchase Office Supplies (acct. 1234) for $4000 + $400 tax from \"Joe\'s Office S" +
                    "upplies\" (acct. 5000)");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "AccountNumber",
                        "AcctType",
                        "AccountName",
                        "Debit",
                        "Credit"});
            table1.AddRow(new string[] {
                        "1000",
                        "Asset",
                        "Cash",
                        "0.0",
                        "0.0"});
            table1.AddRow(new string[] {
                        "1234",
                        "Asset",
                        "Office Supplies",
                        "4000.0",
                        "0.0"});
            table1.AddRow(new string[] {
                        "3002",
                        "Liability",
                        "Sales Tax Owing",
                        "400.0",
                        "0.0"});
            table1.AddRow(new string[] {
                        "5000",
                        "Liability",
                        "Joe\'s Office Supplies",
                        "0.0",
                        "4000.0"});
            table1.AddRow(new string[] {
                        "7000",
                        "Equity",
                        "John Smith (Owner)",
                        "0.0",
                        "0.0"});
            table1.AddRow(new string[] {
                        "3001",
                        "Revenue",
                        "Sales Tax Refunds",
                        "0.0",
                        "400.0"});
#line 9
 testRunner.Then("the trial balance should look like this:", ((string)(null)), table1);
#line 19
 testRunner.And("the trial balance total should be $4400.");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
